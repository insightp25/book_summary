# SECTION3. 스프링 핵심 원리 이해2 - 객체 지향 원리 적용
(빠르게 review하고 핵심만 기록하는 용도, 축약 및 생략 다수)

---
# 관심사의 분리

* 관심사의 분리:
  * 구성 영역: 객체를 생성하고 연결하는 역할(eg. AppConfig)
  * 사용 영역: 실행하는 역할(eg. MemberServiceImpl)

  을 명확히 분리

<br>
<br>

---

# IoC, DI, 그리고 컨테이너

## 제어의 역전 IoC
* 기존 프로그램은 클라이언트 구현체가 스스로 필요 서버 구현 객체 생성, 연결, 실행. 구현 객체가 프로그램 제어 흐름 스스로 조종.
* 반면 AppConfig 등장 이후 구현 객체는 자신의 로직 실행 역할만 담당. 프로그램 제어 흐름은 AppConfig가 가져감.
* 이렇게 `프로그램 제어 흐름`을 직접 제어하는 것이 아니라 `외부에서 관리하는 것`을 제어의 역전(IoC)라고 한다.
* 스프링 뿐만 아닌 다양한 곳에서 이 개념이 사용된다. eg. 프레임워크(as opposed to 라이브러리)

### 프레임워크 vs 라이브러리
* 프레임워크: 코드를 제어하고 실행(eg. JUnit)
* 라이브러리: 내 코드가 직접 제어 흐름 담당

<br>

## 의존관계 주입 DI
* 의존관계는
  * `정적인 클래스 의존관계`와
  * 실행 시점에 결정되는 `동적인 객체(인스턴스) 의존관계`

  를 `분리해서 생각`해야 한다.

### 정적 클래스 의존관계
* 클래스가 사용하는 import 코드만 보고 의존관계 판단 가능.
* OrderServiceImpl은 DiscountPolicy 인터페이스에 의존(하지만 OrderServiceImpl을 보고서는 실제 DiscountPolicy의 어떤 구현 객체가 사용될지 모른다).

### 동적 클래스 의존관계
* 의존관계 주입: 애플리케이션 실행 시점(런타임)에 외부에서 실제 구현 객체 생성, 클라이언트에 전달, 클라이언트-서버 실제 의존관계가 연결되는 것
* 객체 인스턴스 생성, 참조값 전달해 연결
* 의존관계 주입시 클라이언트 코드의 변경 없이 클라이언트가 호출하는 대상의 타입 인스턴스를 변경할 수 있다.
* 의존관계 주입시 정적 클래스 의존관계 변경 없이, 동적 객체 인스턴스 의존관계 쉽게 변경 가능

### IoC 컨테이너/DI 컨테이너
* AppConfig처럼 객체를 생성하고 관리하면서 의존관계를 연결해주는 것
* 최근 주로 DI 컨테이너로 칭하며 어셈블러, 오브젝트 팩토리 등으로 불리기도 한다.
* (스프링 외 오픈소스 DI 컨테이너들도 많다)

<br>

# 스프링으로 전환하기

* `ApplicationContext`를 스프링 컨테이너라 한다.
* 기존 AppConfig 대체
* 스프링 컨테이너는 @Configuration이 붙은 AppConfig를 설정(구성) 정보로 사용. 여기서 `@Bean이라 적힌 메서드를 모두 호출해 반환된 객체를 스프링 컨테이너에 등록`하며, 등록된 객체를 `스프링 빈`이라 칭한다(`빈 = 객체/인스턴스`).
* 스프링 빈은 `@Bean이 붙은 메서드 명`을 `스프링 빈의 이름`으로 사용(eg. memberService, orderService. `@Bean(name = "xxx")`과 같은 식으로 빈 인자에 이름을 직접 넣을 수는 있으나, 왠만하면 디폴트 방식 쓰는 게 좋다.),
  * 전: 개발자가 필요한 객체를 AppConfig를 사용해 직접 조회
  * 후: 스프링 컨테이너 통해 스프링 빈(객체) 조회. applicationContext.getBean() 메서드 통해 빈 조회 가능.

